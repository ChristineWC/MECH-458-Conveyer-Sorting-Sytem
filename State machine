So I'm not exactly sure if this is what you were thinking but I made this: 
	
	typedef enum
	{
		READ_IN_INT = 0,
		EXIT_PREP_INT = 1,
		STEPPER_MOTOR = 2,
		DUMP = 3,
		SYSTEM_PAUSE = 4,
		RAMP_DOWN = 5
	} State;
	
	and I put it in the header file 
	
	then in the full code c file I made this:
	State current_state;
	
	So because what happens in the build a new node state and the read in interrupt state happens when the interrupt is fired 
  I just combined the two and in the interrupt I changed the state to the read in interrupt state 
  like so: "current_state = READ_IN_INT; "
	
	With the exit prep_int state according to the flowchart it is triggered when the end of travel sensor triggers the interrupt
	So in the ISR for the EOT sensor, current_state = EXIT_PREP_INT;
	and I followed the pseudo code that you wrote and wrote this:
	
	ISR(INT3_vect)// EX sensor, it is hooked up to PORT D3
{
	PORTB = 0b00000000;    // this is Brake Vcc
	Item* it = list->head;
	Material mat = it->material;
	if(mat == STEEL)
	{
		steel_count++; 
	}
	else if(mat == ALUMINUM)
	{
		aluminum_count++;	
	}
	else if(mat == BLACK)
	{
		black_count++;	
	}
	else if(mat == WHITE)
	{
		white_count++; 
	}
	//trigger stepper motor state
  
}
	So it said to trigger the stepper motor state and I'm not really sure how you were thinking to trigger another state 
  unless it was the switch case break stuff?
	
	Then I don't know where this would go exactly or what it would look like
	
	DUMP STATE{
		-turn on DC motor until End Of Travel (EOT) sensor pin reads high (signaling successful dump)
		-trigger NO ACTION STATE (MAIN WHILE LOOP)
	}
	
	but in code form:
  
	current_state = DUMP; 
  
	while((PIND &= 0x08) == 0x00) //this is while there is nothing in front of the exit sensor
	{
	PORTB = 0b00000010;		// DC motor forward (CCW)
	}
  
	//trigger no action state
  
